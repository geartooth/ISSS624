---
title: "Hands-on Exercise 2 part 1"
subtitle: "Spatial Weights & Applications"
---

# Ex2-1.1 Overview

In this exercise we will compute spatial weights of the Hunan county in China.

# Ex2-1.2 Loading packages & data

## Ex2-1.2.1 Load packages

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Ex2-1.2.2 Load datasets

```{r}
hunan <- st_read(dsn = "data/part 1/geospatial", 
                 layer = "Hunan")
hunan2012 <- read_csv("data/part 1/aspatial/Hunan_2012.csv")
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

# Ex2-1.3 Visualising Regional Development Indicator

Here we will prepare a basemap and choropleth map showing the distribution of development in the Hunan county. The 2 maps will prepared separately and then subsequently joined using the tmpa_arrange method we learned in [Hands-on Ex1 part 2](https://isss624-liankhye.netlify.app/hands-on_ex01/hands-on_ex1_part_2).

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

# Ex2-1.4 Computing Contiguity Spatial Weights

Contiguity refers to a common boundary from the grid of interest. There are 3 classification cases as shown below.

![](/images/Contiguity_types.png)

## Ex2-1.4.1 Using "Queen" contiguity based neighbours

Utilise the "Queen" contiguity weight matrix. This means that all of the immediate neighbours will be taken into consideration.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The above data shows that there are 88 regions. 1 region has 11 connected regions and 2 regions has only 1 connected region.

We can extract specific regions or polygons. The following shows the 1st polygon, the name of the polygon and its neighbours.

```{r}
wm_q[[1]]
hunan$County[1]
hunan$NAME_3[c(2,3,4,57,85)]
```

The following shows the GDPPC of the 5 nearest neighbours of each region or polygon.

```{r}
str(wm_q)
```

## Ex2-1.4.2 Using "Rook" contiguity based neighbours

Utilise the "Rook" contiguity weight matrix. This means that only neighbouring regions with certain length of contiguity will be taken into consideration. This means that 2 neighbours connected by a single point will not be considered.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

Now the region with the most number of neighbouring polygon has only 11 neighbours.

## Ex2-1.4.3 Visualising the contiguity weights

Here we will connect all of the regions with their neighbouring polygons with a line.

We will first have to obtain the longitudinal and latitudinal data of each county. Then we will combine them into a coordinate.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
```

We will first plot the Queen contiguity based neighbours map.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

Next we will plot the Rook contiguity based neighbours map.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "blue")
```

Finally we will join them together. Left with red lines will be Queen contiguity. Right with blue lines will be Rook contiguity.

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity")
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "blue", main="Rook Contiguity")
```

# Ex2-1.5 Computing distance

Here we will use *dnearneigh()* of **spdep** package to obtain the distance-based weight matrices.

## Ex2-1.5.1 Determine the cut-off distance

We will have to determine the upper limit for the distance first.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

Next we will determine the fixed distance weight matrix. The distance we will use here will be 62km.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

The average number of links refer to the average number of neighbours.

Using *str()* for showing the contents of wm_d62 weight matrix.

```{r}
str(wm_d62)
```

Another alternative method is to use *table()* and *card()*.
```{r}
table(hunan$County, card(wm_d62))
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
table(n_comp$comp.id)
```

## Ex2-1.5.2 Plotting the fixed distance matrix

Here we will plot the distance weight matrix. The red line represents closest neighbour and the black line will show neighbours that are within the cut-off of 62km.

```{r}
par(mfrow=c(1,3))
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```

## Ex2-1.5.3 Computing adaptive distance weight matrix

Here we will control the number of neighbours to a region. The number of neighbours will be denoted by the variable k.
```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

We can then display the content of the matrix using *str()* as seen earlier.
```{r}
str(knn6)
```

Even previously unconnected neighbours will have k number of neighbours.

## Ex2-1.5.4 Plotting distance based neighbours

Here we will plot out the weight matrix of each region connecting to k number of neighbours.

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

# Ex2-1.6 Weights using Inversed Distance method

Inversed Distance method utilises weighted average. This is also known as IDW. We can calculate that using *nbdists()*.

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

We will then have to assign weights to neighbouring polygons using 1/number of neighbours. We will then sum up the weighted income values. The weight we are using is equal weight.
```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

We will then calculate the row standardised distance weight matrix.
```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
rswm_ids$weights[1]
summary(unlist(rswm_ids$weights))
```

# Ex2-1.7 Application of Spatial Weight Matrix

Spatial Lag refers to how one event in a neighbour affects the other.

## Ex2-1.7.1 Spatial lag with row-standardized weights
Here we will use the average GDPPC value as the spatially lagged values.
```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

We can the plot the GDPPC and spatial lag GDPPC. 
```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

## Ex2-1.7.2 Spatial lag as a sum of neighbouring values

Now we will calculate spatial lag as a sum of neighbouring values through assigning binary weights. 

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
hunan <- left_join(hunan, lag.res)
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

## Ex2-1.7.3 Spatial window average

Here we will use the row-standardized weights for assigning the weights. We will use *include.self()* for performing it.

```{r}
wm_qs <- include.self(wm_q)
wm_qs[[1]]
wm_qs <- nb2listw(wm_qs)
wm_qs
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan <- left_join(hunan, lag_wm_qs.res)
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

Finally we can plot it.
```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

## Ex2-1.7.4 Spatial window sum
The spatial window sum is the opposite of the average and we will not be using thr row-standardized weights.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
hunan <- left_join(hunan, w_sum_gdppc.res)
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Then finally we can plot it.
```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```