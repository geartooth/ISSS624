---
title: "In_class_Ex03"
---




# Overview

# Loading packages and data

## Loading packages
```{r}

pacman::p_load(tmap, sf, sp, DT, 
               performance, reshape2,
               ggpubr, tidyverse)
```

## Loading data

We will utilise the data that we have created from hands on Ex 3.
```{r}
mpsz <- read_rds("data/rds/mpsz.rds")
mpsz

```

# Calculate distance matrix

Here we will convert the mpsz variable from a data frame to a spatial polygon dataframe.
```{r}
mpsz_sp <- as(mpsz, "Spatial")
mpsz_sp

```
Next we will use *spDists()* function to calculate the Euclidean distance between centroids of different planning zones.
```{r}
dist <- spDists(mpsz_sp, 
                longlat = FALSE)
head(dist, n=c(10, 10))
```

## Labelling column and row headers

We will create a list and then sort the distance by the planning sub-zones.
```{r}
sz_names <- mpsz$SUBZONE_C
```

We will then attach the sub-zones to row and column next.

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)

```


## Pivoting distance value by sub-zone

We will then pivot using the row and columns of the distance matrix into a table.
```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```


## Update intra-zonal distances

Here we will change the intra-zone distances of 0 by a constant value. We will need to identify the smallest distance.
```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()

```

We will then add a constant distance value of 50m.
```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

We can check the data again.
```{r}
distPair %>%
  summary()
```

After that we can rename the origin and destination fields.

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

Finally, we can save the file as rds format.
```{r}
write_rds(distPair, "data/rds/distPair.rds") 
```

# Preparing flow data

We will then read the file that was created in hands on ex 3.
```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

Next we will calculate the total ridership between and within planning subzones.

```{r}
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(MORNING_PEAK)) 
```

We can then use the following to check the first 10 entries.
```{r}
head(flow_data, 10)
```

## Separate intra-flow from passenger volume

We will first add 3 new fields into the flow_data dataframe.

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 1)

```

## Combine passenger volume and distance value

We will first convert the ORIGIN_SZ and DESTIN_SZ into fator data types.

```{r}
flow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)
```

After that we can join the data together using *left_join()*.

```{r}
flow_data1 <- flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

# Preparing origin and destination attributes

## Importing population data

We will first import the population data and select certain columns and renaming them.
```{r}
pop <- read_csv("data/aspatial/pop.csv")
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```
## Preparint origin attribute

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

## Preparing destination attribute
```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))

```

We will then save the output as a rds file.

```{r}
write_rds(flow_data1, "data/rds/SIM_data")
```

# Calibtating spatial interaction models

Here we will be using Poisson regression to calibrate the spatial interaction model.

## Import modelling data

We will be using the SIM_data from earlier

```{r}
SIM_data <- read_rds("data/rds/SIM_data.rds")
```

## Visualising the dependent variable

Here we will use **ggplot** for plotting the histogram.

```{r}
ggplot(data = SIM_data,
       aes(x = TRIPS)) +
  geom_histogram()
```

Next we will visualise the chart as a dot representing each variable.

```{r}
ggplot(data = SIM_data,
       aes(x = dist,
           y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)
```

We will need to log transformed both variables to make the linear relationship clearer. We will do that in the following code.

```{r}
ggplot(data = SIM_data,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point() +
  geom_smooth(method = lm)

```

## Check for zero

Since Poisson regression is formed using log and log 0 will give an invalid data, we will have to make sure that there is no 0 values in the data.

We can use *summary()* function to summarise the data to check for values with 0 value.

```{r}
summary(SIM_data)
```

Subsequently we will substitute the 0 values with a placeholder value such as 0.99

```{R}
SIM_data$DESTIN_AGE7_12 <- ifelse(
  SIM_data$DESTIN_AGE7_12 == 0,
  0.99, SIM_data$DESTIN_AGE7_12)
SIM_data$DESTIN_AGE13_24 <- ifelse(
  SIM_data$DESTIN_AGE13_24 == 0,
  0.99, SIM_data$DESTIN_AGE13_24)
SIM_data$DESTIN_AGE25_64 <- ifelse(
  SIM_data$DESTIN_AGE25_64 == 0,
  0.99, SIM_data$DESTIN_AGE25_64)
SIM_data$ORIGIN_AGE7_12 <- ifelse(
  SIM_data$ORIGIN_AGE7_12 == 0,
  0.99, SIM_data$ORIGIN_AGE7_12)
SIM_data$ORIGIN_AGE13_24 <- ifelse(
  SIM_data$ORIGIN_AGE13_24 == 0,
  0.99, SIM_data$ORIGIN_AGE13_24)
SIM_data$ORIGIN_AGE25_64 <- ifelse(
  SIM_data$ORIGIN_AGE25_64 == 0,
  0.99, SIM_data$ORIGIN_AGE25_64)
```

## Unconstrained spatial interaction model

Here we will calibrate an unconstrained spatial interaction model using *glm()*. The explanatory variables are as follows:
- Origin population by different age range
- Destination population by different age range
- distance between origin and destination in km

We can do that using the following code.
```{r}
uncSIM <- glm(formula = TRIPS ~ 
                log(ORIGIN_AGE25_64) + 
                log(DESTIN_AGE25_64) +
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
uncSIM
```

## R-squared function

Next we will calculate the R-squared value to measure the variation of the trips from the linear line.

```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

Here we will calculate the R-squared of the unconstrained SIM.

```{r}
CalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
r2_mcfadden(uncSIM)
```

Here we see that the R-square value to be 0.446, this means that most points is different from the linear line.

## Origin(Production) constained SIM

Here we will fit an origin constrained SIM instead.

```{r}
orcSIM <- glm(formula = TRIPS ~ 
                 ORIGIN_SZ +
                 log(DESTIN_AGE25_64) +
                 log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(orcSIM)

```

We can see how much constraints hold for the destinations.

```{r}
CalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
```

## Destination constrained

Here we will fit a destination constrained SIM.

```{r}
decSIM <- glm(formula = TRIPS ~ 
                DESTIN_SZ + 
                log(ORIGIN_AGE25_64) + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(decSIM)
```

We can use the following to see the constraints hold for destinations.

```{r}
CalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)
```

## Doubly constrained

Here we will fit a doubly constrained SIM.

```{r}
dbcSIM <- glm(formula = TRIPS ~ 
                ORIGIN_SZ + 
                DESTIN_SZ + 
                log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(dbcSIM)
```

Next we can examine the constraints hold.

```{r}
CalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```

The improvement in R-square value means that there is an improvement in fitting of the variables to the linear line.

## Model comparison

We can use the Root Mean Squared Error for comparing the different models. We can use the *compare_performance()* from the **performance** package to do that.

```{r}
model_list <- list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)

```

After that we will compute the RMSE of all of the models that we have assigned to the variable above.

```{r}
compare_performance(model_list,
                    metrics = "RMSE")

```

The smaller the RMSE value the better the model is.

## Visualisation

Here we will visualse the observed values and the fitted values. We can do that by extracting the fitted values from each model.

```{r}
df <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)

```

After that we will join the values extracted to the *SIM_data* dataframe.
```{r}
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```

We will then do everything again for the Origin Constrained SIM, Destination Constrained and Doubly Constrained SIM.

### Origin Constrained SIM

```{r}
df <- as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")

```

### Destination Constrained SIM

```{r}
df <- as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(decTRIPS = "decSIM$fitted.values")

```

### Doubly Constrained SIM

```{r}
df <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)
SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```

### Plotting

Here we will then plot all of the different models together. 

```{r}
unc_p <- ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

orc_p <- ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dec_p <- ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

dbc_p <- ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point() +
  geom_smooth(method = lm)

ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)

```