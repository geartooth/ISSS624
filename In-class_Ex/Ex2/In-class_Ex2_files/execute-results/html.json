{
  "hash": "30ea1dd34e2d6890d94406ed520aa4b8",
  "result": {
    "markdown": "---\ntitle: \"In-class_Ex2\"\n---\n\n\n# OVerview\n\n# Getting started\n\nFor the purpose of this in-class exercise, the Hunan datasets will be used. There are 2 data sets in this case, they are: - Hunan, a geospatial data set in ESRI shapefile format, and - Hunan_2012, an attribute data set in csv format\n\n## Loading packages and data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr,sfdep, plotly, zoo)\n```\n:::\n\n\n## Loading data\n\n### Geospatial data\n\nThe following uses the *st_read()* function from the ***sf*** package to read the geospatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `C:\\Users\\Lian Khye\\Desktop\\MITB\\Geospatial\\geartooth\\ISSS624\\In-class_Ex\\Ex2\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n### Import attributable table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n### Combining the tables\n\nLeft join because of joining different data types. Here we retain the *hunan* dataframe and append the hunan table in order to save the geometry data automatically due to the nature of it being a spatial data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_GDPPC <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(County)`\n```\n:::\n:::\n\n\n### \n\nHere we will be plotting the choropleth map of the hunan_GDPPC joint data from the previous step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Distribution of GDP per capita by district, Hunan Province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n# Spatial Weights\n\nThere are 2 types of spatial weights, contiguity and distance based. Contiguity spatial weights refer to having a common border and distance based spatial weights are based on a distance.\n\n## Contiguity Spatial Weights\n\nHere we will first try the contiguity weights using *st_contiguity()* to obtain the number of neighbours, followed by *st_weights()* to obtain the the contiguity spatial weights.\n\n### Queen's method\n\nHere we will be using the Queen's method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_queen <- hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry),\n         .before = 1)\nsummary(nb_queen$nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n```\n:::\n:::\n\n\nThe report shows that there are 88 area units or regions in the Hunan province and the area with the most number of connected neighbours is 11 and the least is 1.\n\nOne advantage of using **sfdep** is the output being in a table format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(nb_queen,\n           n=10))\n```\n\n::: {.cell-output-display}\n|nb                             |NAME_2   |  ID_3|NAME_3    |ENGTYPE_3   |County    | GDPPC|geometry                       |\n|:------------------------------|:--------|-----:|:---------|:-----------|:---------|-----:|:------------------------------|\n|2, 3, 4, 57, 85                |Changde  | 21098|Anxiang   |County      |Anxiang   | 23667|POLYGON ((112.0625 29.75523... |\n|1, 57, 58, 78, 85              |Changde  | 21100|Hanshou   |County      |Hanshou   | 20981|POLYGON ((112.2288 29.11684... |\n|1, 4, 5, 85                    |Changde  | 21101|Jinshi    |County City |Jinshi    | 34592|POLYGON ((111.8927 29.6013,... |\n|1, 3, 5, 6                     |Changde  | 21102|Li        |County      |Li        | 24473|POLYGON ((111.3731 29.94649... |\n|3, 4, 6, 85                    |Changde  | 21103|Linli     |County      |Linli     | 25554|POLYGON ((111.6324 29.76288... |\n|4, 5, 69, 75, 85               |Changde  | 21104|Shimen    |County      |Shimen    | 27137|POLYGON ((110.8825 30.11675... |\n|67, 71, 74, 84                 |Changsha | 21109|Liuyang   |County City |Liuyang   | 63118|POLYGON ((113.9905 28.5682,... |\n|9, 46, 47, 56, 78, 80, 86      |Changsha | 21110|Ningxiang |County      |Ningxiang | 62202|POLYGON ((112.7181 28.38299... |\n|8, 66, 68, 78, 84, 86          |Changsha | 21111|Wangcheng |County      |Wangcheng | 70666|POLYGON ((112.7914 28.52688... |\n|16, 17, 19, 20, 22, 70, 72, 73 |Chenzhou | 21112|Anren     |County      |Anren     | 12761|POLYGON ((113.1757 26.82734... |\n:::\n:::\n\n\n### Rook's method\n\nHere we will be using the Rook's method.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb_rook <- hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry,\n                            queen = FALSE),\n         .before = 1)\nsummary(nb_rook$nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n```\n:::\n:::\n\n\nHere we see the region with the highest number of neighbours has dropped to 10 due to loss of point or corner neighbours.\n\n### Higher order neighbours\n\nHigher order neighbours refer to secondary neighbours that are not directly connected to the region of interest. Depending on the order number, it is how many neighbours away.\n\nWe will use \\*\\*st_nb_lag_cumul()\\* for calculating.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnb2_queen <-  hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry),\n         nb2 = st_nb_lag_cumul(nb, 2),\n         .before = 1)\nsummary(nb2_queen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 1324 \nPercentage nonzero weights: 17.09711 \nAverage number of links: 15.04545 \nLink number distribution:\n\n 5  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 28 33 \n 2  1  6  4  5  4  8  5 10  4  4  8  4  8  5  2  2  1  2  1  1  1 \n2 least connected regions:\n30 88 with 5 links\n1 most connected region:\n56 with 33 links\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n    nb         nb2          NAME_2               ID_3          NAME_3         \n NULL:NULL   NULL:NULL   Length:88          Min.   :21098   Length:88         \n                         Class :character   1st Qu.:21125   Class :character  \n                         Mode  :character   Median :21150   Mode  :character  \n                                            Mean   :21150                     \n                                            3rd Qu.:21174                     \n                                            Max.   :21201                     \n  ENGTYPE_3            County              GDPPC                geometry \n Length:88          Length:88          Min.   : 8497   POLYGON      :88  \n Class :character   Class :character   1st Qu.:14566   epsg:4326    : 0  \n Mode  :character   Mode  :character   Median :20433   +proj=long...: 0  \n                                       Mean   :24405                     \n                                       3rd Qu.:27224                     \n                                       Max.   :88656                     \n```\n:::\n:::\n\n\nHere we see the number of neighbours increasing with the highest number of neighbours reaching 33 for 1 region.\n\n### Deriving contiguity weights\n\nAfter calculating the number of neighbours, we can then compute the contiguity weights using *st_weights()*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- hunan_GDPPC %>% \n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"),\n         .before = 1)\nwm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n```\n:::\n:::\n\n\nThe 3 arguments used are\n\n-   nb - list of neighbours\n-   style - Default will be W style, repsenting row standardisation. Others include C, global standardisation, U, C style divided by number of neighbours, and S, sums of all links to n.\n-   allow_zero - if TRUE, it assigns 0 to regions without neighbours\n\n## Distance based weights\n\nThere are 3 difference distance based weights:\n\n-   Fixed distance weights\n-   Adaptive distance weights\n-   inverse distance weights\n\n### Fixed distance weights\n\nAs the name suggest, this method uses a fixed distance for measuring the number of neighbours. We will first determine the upper limit using the following steps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeo <- sf::st_geometry(hunan_GDPPC)\nnb <- st_knn(geo, longlat = TRUE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Polygon provided. Using point on surface.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n```\n:::\n\n```{.r .cell-code}\ndists <- unlist(st_nb_dists(geo, nb))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Polygon provided. Using point on surface.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in st_point_on_surface.sfc(geometry): st_point_on_surface may not give\ncorrect results for longitude/latitude data\n```\n:::\n:::\n\n*st_nb_dists()* is used for calculating the nearest neighbour, the output will be the distance to each neighbour for each region.\n*unlist()* is from the base R function and returns the output as a vector.\n\nNext we will derive the statistical summary of the nearest neighbour distances.\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dists)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.56   29.11   36.89   37.34   43.21   65.80 \n```\n:::\n:::\n\n\nThis shows that the max distance for the nearest neigh bour is 65.8km, and when we round up to 66km, each region would have at least 1 neighbour.\n\nWith that we can then compute the fixed distance weights.\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_fd <- hunan_GDPPC %>%\n  mutate(nb = st_dist_band(geometry,\n                           upper = 66),\n               wt = st_weights(nb),\n               .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Polygon provided. Using point on surface.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `nb = st_dist_band(geometry, upper = 66)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n:::\n\n```{.r .cell-code}\nsummary(wm_fd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 400 \nPercentage nonzero weights: 5.165289 \nAverage number of links: 4.545455 \nLink number distribution:\n\n 1  2  3  4  5  6  7 \n 4  7 10 16 23 23  5 \n4 least connected regions:\n30 32 65 75 with 1 link\n5 most connected regions:\n41 52 58 63 80 with 7 links\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n    nb       wt.Length  wt.Class  wt.Mode    NAME_2               ID_3      \n NULL:NULL   6        -none-   numeric    Length:88          Min.   :21098  \n             5        -none-   numeric    Class :character   1st Qu.:21125  \n             4        -none-   numeric    Mode  :character   Median :21150  \n             4        -none-   numeric                       Mean   :21150  \n             5        -none-   numeric                       3rd Qu.:21174  \n             3        -none-   numeric                       Max.   :21201  \n             3        -none-   numeric                                      \n             5        -none-   numeric                                      \n             6        -none-   numeric                                      \n             6        -none-   numeric                                      \n             4        -none-   numeric                                      \n             6        -none-   numeric                                      \n             4        -none-   numeric                                      \n             2        -none-   numeric                                      \n             4        -none-   numeric                                      \n             5        -none-   numeric                                      \n             5        -none-   numeric                                      \n             4        -none-   numeric                                      \n             5        -none-   numeric                                      \n             6        -none-   numeric                                      \n             6        -none-   numeric                                      \n             4        -none-   numeric                                      \n             4        -none-   numeric                                      \n             6        -none-   numeric                                      \n             6        -none-   numeric                                      \n             4        -none-   numeric                                      \n             3        -none-   numeric                                      \n             6        -none-   numeric                                      \n             2        -none-   numeric                                      \n             1        -none-   numeric                                      \n             4        -none-   numeric                                      \n             1        -none-   numeric                                      \n             5        -none-   numeric                                      \n             5        -none-   numeric                                      \n             5        -none-   numeric                                      \n             5        -none-   numeric                                      \n             2        -none-   numeric                                      \n             3        -none-   numeric                                      \n             5        -none-   numeric                                      \n             6        -none-   numeric                                      \n             7        -none-   numeric                                      \n             6        -none-   numeric                                      \n             5        -none-   numeric                                      \n             3        -none-   numeric                                      \n             6        -none-   numeric                                      \n             6        -none-   numeric                                      \n             5        -none-   numeric                                      \n             5        -none-   numeric                                      \n             5        -none-   numeric                                      \n             6        -none-   numeric                                      \n             5        -none-   numeric                                      \n             7        -none-   numeric                                      \n             2        -none-   numeric                                      \n             6        -none-   numeric                                      \n             4        -none-   numeric                                      \n             2        -none-   numeric                                      \n             6        -none-   numeric                                      \n             7        -none-   numeric                                      \n             3        -none-   numeric                                      \n             6        -none-   numeric                                      \n             5        -none-   numeric                                      \n             4        -none-   numeric                                      \n             7        -none-   numeric                                      \n             4        -none-   numeric                                      \n             1        -none-   numeric                                      \n             6        -none-   numeric                                      \n             2        -none-   numeric                                      \n             5        -none-   numeric                                      \n             3        -none-   numeric                                      \n             3        -none-   numeric                                      \n             4        -none-   numeric                                      \n             5        -none-   numeric                                      \n             6        -none-   numeric                                      \n             5        -none-   numeric                                      \n             1        -none-   numeric                                      \n             6        -none-   numeric                                      \n             5        -none-   numeric                                      \n             3        -none-   numeric                                      \n             6        -none-   numeric                                      \n             7        -none-   numeric                                      \n             5        -none-   numeric                                      \n             6        -none-   numeric                                      \n             5        -none-   numeric                                      \n             4        -none-   numeric                                      \n             3        -none-   numeric                                      \n             6        -none-   numeric                                      \n             4        -none-   numeric                                      \n             2        -none-   numeric                                      \n    NAME_3           ENGTYPE_3            County              GDPPC      \n Length:88          Length:88          Length:88          Min.   : 8497  \n Class :character   Class :character   Class :character   1st Qu.:14566  \n Mode  :character   Mode  :character   Mode  :character   Median :20433  \n                                                          Mean   :24405  \n                                                          3rd Qu.:27224  \n                                                          Max.   :88656  \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n          geometry \n POLYGON      :88  \n epsg:4326    : 0  \n +proj=long...: 0  \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n                   \n```\n:::\n:::\n\nHere we can see that there are 4 regions with only 1 neighbour and 5 regions with 7 neighbours.\n\n*st_dists_band()* can be used to identify neighbours and the fixed distance selected.\n*st_weights()* uses the W style and the allow_zero to be TRUE as default.\n\n### Adaptive distance weights\nHere we will use adaptive distance weights where the distance used is dependent on the data density.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_ad <- hunan_GDPPC %>% \n  mutate(nb = st_knn(geometry,\n                     k=8),\n         wt = st_weights(nb),\n               .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Polygon provided. Using point on surface.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `nb = st_knn(geometry, k = 8)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n:::\n:::\n\n*st_knn()* is used to determine the number of neighbours to be used for calculating distance.\n*st_weights()* is used for calculaing the polygon spatial weights of the list of neightbours. It uses the W style and the allow_zero to be TRUE as default.\n\n### Inverse distance weights\n\nThis method will create proportional weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_idw <- hunan_GDPPC %>%\n  mutate(nb = st_contiguity(geometry),\n         wts = st_inverse_distance(nb, geometry,\n                                   scale = 1,\n                                   alpha = 1),\n         .before = 1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n! Polygon provided. Using point on surface.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n```\n:::\n:::\n\n*st_contiguity()* is used to identify the neighbours using a common border criteria.\n*st_inverse_distance()* is then used for calculating the inverse distance weights of the neighbours in the list.\n\n",
    "supporting": [
      "In-class_Ex2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}