---
title: "Take-home_Ex2"
---

# Overview

Organising bodies will have to consider passenger usage to and from locations when adding, changing or removing current transportation routes. Any alterations to present routes can lead to passengers having to seek alternate travelling options that can impact travel time and distance. To minimise the impact, the travelling routes taken will have to be surveyed thorugh commuters survey. However this form of sampling can be inefficient and will easily be out of date. The use of passenger tracking methods such as GPS or smart card boarding and alighting locations may be used as a substitute that can generate data more readily. 

# Objective

The main objectives of this exercise is to analyse the boarding and alighting locations of passengers of a time interval. This analysis will allow us to track the factors that affect urban mobility so that route usage may be analyse for future route planning.

# Tasks

The tasks of this exercise are as follow:
- Derive an analytical hexagon map to be used as a traffic analysis zone
- Construct an O-D matrix of commuter flow for weekday mornings from 6am to 9am
- Display the O-D flows
- Assemble at least 3 propulsive and 3 attractiveness variables 
- Compute a distance matrix
- Calibrate spatial interactive models and present the modelling results using geovisualisation and graphical visualisation methods

# Importing packages and data

## Import packages
Firstly, we will import the various packages that we will need for this exercise.
```{r}
pacman::p_load(sf,tmap,spdep,tidyverse, dplyr, mapview, sfdep, stplanr, glue, DT)
```

## Import data

### Loading aspatial table

Here we will import the ridership of the different bus stops in Oct 2023.
```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```

Next we will extract the ridership for weekdays from 7am to 9am only.

```{r}
weekdayAM_6_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

```

### Loading geospatial data

Next we will import all of the bus stops and their coordinates and attached it to the *busstop* variable.

```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

We will first rename the bus stop column title for easier data joining.

```{r}
colnames(busstop)[colnames(busstop) == "BUS_STOP_N"] <- "ORIGIN_PT_CODE"
```

We will also import the layout of Singapore for excluding bus stops that are not found in Singapore.

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)

```

After that we will create the hexagons that will create the map layout. All of the hexagons will also be given a grid id name that can be used for identifying each individual grid.

```{r}
center <- st_centroid(busstop)

area_honeycomb_grid <- st_make_grid(center, cellsize = c(325 * sqrt(3), 325 * 2), what = "polygons", square = FALSE)
honeycomb_grid_sf <- st_sf(area_honeycomb_grid) %>%
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))

```

# Data processing

## Assigning individual bus stop to hexagons

First we will assign the bus stop point geometry data to each polygon using *st_intersection()* of Singapore to obtain bus stops located locally followed by another intersection with the hexagon map. The function assigns all of the points to a polygon by the point-set intersection of two geometries. Additional information [here](https://postgis.net/docs/ST_Intersection.html).

```{r}

valid_busstop <- st_intersection(busstop, mpsz)
busstop_hex <- st_intersection(valid_busstop, honeycomb_grid_sf) %>%
  st_drop_geometry()

```

## Duplication check

Here we will check for the presence of any duplication before we further process the data.

```{r}
duplicate <- weekdayAM_6_9 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate
```

Finally we will only keep data points that are unique using the *unique()* function.

```{r}
unique_weekdayAM <- unique(weekdayAM_6_9)
```

### Joining destination table and grid

Using the grid that we have created in the beginning, we will now join the data that contains the destination together with the grid.

```{r}
combn_des_weekdayAM <- left_join(unique_weekdayAM,busstop_hex) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_GRID = grid_id,
         DESTIN_BS = DESTINATION_PT_CODE)

```



### Rejoin hexagonal information

We can then rejoin the hexagonal information back using *left_join()* function.

```{r}
poly_des_weekdayAM <- left_join(combn_des_weekdayAM , busstop_hex,
            by = c("DESTIN_BS" = "ORIGIN_PT_CODE"))
```

### Sum total trips

We will then sum up the total number of trips made from a bus stop of origin to the destination using *group_by()* for sorting. Putting multiple arguments into the function allows for the sub categorising of the data. This way we can track the drop off point of the passengers.

```{r}
ori_des_weekdayAM <- poly_des_weekdayAM %>%
  rename(DESTIN_GRID = grid_id) %>%
  drop_na() %>%
  group_by(ORIGIN_GRID, DESTIN_GRID) %>%
  summarise(PEAK = sum(TRIPS))
```

## Visualisation

We will first remove any intra-hexagonal travel.

```{r}
R_weekdayAM <- ori_des_weekdayAM[ori_des_weekdayAM$ORIGIN_GRID!=ori_des_weekdayAM$DESTIN_GRID,]
```


### Create desire lines

Next we will visualise all of the flow or connections between different bus stops from a subzone to another using the *od2line()* function from the **stplanr** package.

```{r}
flow_weekdayAM <- od2line(flow = R_weekdayAM, 
                    zones = honeycomb_grid_sf,
                    zone_code = "grid_id")
```

### Visualise desire lines

We can then visualise this flow using the following code. Since the passenger flow is high, it is better to limit the visualisation. Here we will use a passenger flow from hexagons to hexagons of 1500 or more.

```{r}
# tmap_mode("view")
# tm_shape(flow_weekdayAM) +
#   tm_polygons() +
# flow_weekdayAM %>%  
#   filter(PEAK >= 1500) %>%
# tm_shape() +
#   tm_lines(lwd = "PEAK",
#            style = "quantile",
#            scale = c(0.1, 1, 3, 5, 7, 10),
#            n = 6,
#            alpha = 0.3)


```

