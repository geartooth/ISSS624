---
title: "Take_home_Ex1"
Author: "Mah Lian Khye"
date-modified: "last-modified"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: visual
---


# Load Packages and Data

## Load packages

Here we will load the packages needed for this exercise and their respective functions - **sf**: - **tmap**: - **spdep**: - **tidyverse**: - **dplyr**: - **mapview**: - **sfdep**:


```{r}
pacman::p_load(sf,tmap,spdep,tidyverse, dplyr, mapview, sfdep)
```


## Loading data

### Loading aspatial table

Here we will read all of the ridership from different bus stops in Oct 2023 and assign it to the variable.


```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```


We will then extract the information from the following and assign them to different variables.

| Day               | Duration   | Variable name   |
|-------------------|------------|-----------------|
| Weekdays          | 6am - 9am  | weekdayAM_6_9   |
| Weekdays          | 5pm - 8pm  | weekdayPM_5_8   |
| Weekends/Holidays | 11am - 2pm | weekendAM_11_14 |
| Weekends/Holidays | 4pm - 7pm  | weekendPM_4_7   |


```{r}
# Filter data for weekday morning hours
weekdayAM_6_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

weekdayPM_5_8 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 17 & TIME_PER_HOUR <= 20) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

weekendAM_11_14 <- odbus %>% 
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 11 & TIME_PER_HOUR <= 14) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

weekendPM_16_19 <- odbus %>% 
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 17 & TIME_PER_HOUR <= 19) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```


### Loading Geospatial data

Next we will import the all of the bus stops and their coordinates and attached it to the *busstop* variable.


```{r}
# Import geospatial data
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```


After that we will create the hexagons that will create the map layout. The hexagons will be shaped 250 x 250 cell size. All of the hexagons will also be given a grid id name that can be used for identifying each individual grid.


```{r}
area_honeycomb_grid <- st_make_grid(busstop, c(250, 250), what = "polygons", square = FALSE)
honeycomb_grid_sf <- st_sf(area_honeycomb_grid) %>%
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))

```


# Data processing

## Assigning individual bus stop to hexagons

First we will assign the bus stop point geometry data to each polygon using *st_intersection()*. The function assigns all of the points to a polygon and then join both tables together.


```{r}
busstop_hex <- st_intersection(busstop, honeycomb_grid_sf) %>%
  st_drop_geometry()

```


We will first rename the bus stop column title for easier data joining.


```{r}
# Rename column for joining
colnames(busstop_hex)[colnames(busstop_hex) == "BUS_STOP_N"] <- "ORIGIN_PT_CODE"
# weekdayAM_6_9_trips <- left_join(busstop, weekdayAM_6_9)
# test_points <- weekdayAM_6_9_trips %>%
#   filter(!is.na(TRIPS)) %>%
#   st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE) %>%
#   select(1, 4)
#colnames(busstop)[colnames(busstop) == "BUS_STOP_N"] <- "ORIGIN_PT_CODE"
```



## Join tables

Next we will then join the variables that we created earlier that contains the total number of trips at different time intervals and the *busstop_hex* variable together using **BUS_STOP_N** column title that we have in common. We will then also restore the polygonal data back to each time duration and filter for grid ids that do not have trips taken on them.


```{r}

origin_weekdayAM_6_9 <- left_join(weekdayAM_6_9 , busstop_hex)
origin_weekdayPM_5_8 <- left_join(weekdayPM_5_8 , busstop_hex)
origin_weekendAM_11_14 <- left_join(weekendAM_11_14 , busstop_hex)
origin_weekendPM_16_19 <- left_join(weekendPM_16_19 , busstop_hex)
  #           by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  # rename(ORIGIN_BS = ORIGIN_PT_CODE,
  #        ORIGIN_SZ = SUBZONE_C) %>%
  # group_by(ORIGIN_SZ) %>%
  # summarise(TOT_TRIPS = sum(TRIPS))

a <- left_join(honeycomb_grid_sf, origin_weekdayAM_6_9)
b <- left_join(honeycomb_grid_sf, origin_weekdayPM_5_8)
c <- left_join(honeycomb_grid_sf, origin_weekendAM_11_14)
d <- left_join(honeycomb_grid_sf, origin_weekendPM_16_19)

finalA <- a %>%
  filter(TRIPS > 0)
finalB <- b %>%
  filter(TRIPS > 0)
finalC <- c %>%
  filter(TRIPS > 0)
finalD <- d %>%
  filter(TRIPS > 0)

```

## Duplication check

Here we will check for the presence of any duplication before we further process the data.

```{r}
duplicate1 <- finalA %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate2 <- finalB %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate3 <- finalC %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate4 <- finalD %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```


We can see which data points are duplicated here.

```{r}
c(duplicate1,duplicate2,duplicate3,duplicate4)
```


Finally we only keep data points that are unique using the *unique()* function.

```{r}
finalA <- unique(finalA)
finalB <- unique(finalB)
finalC <- unique(finalC)
finalD <- unique(finalD)
```



# Choropleth map



```{r}
mapA <- tm_shape(finalA) +
  tm_borders() +
  tm_fill("TRIPS", style = "quantile", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")
mapB <- tm_shape(finalB) +
  tm_borders() +
  tm_fill("TRIPS", style = "quantile", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")
mapC <- tm_shape(finalC) +
  tm_borders() +
  tm_fill("TRIPS", style = "quantile", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")
mapD <- tm_shape(finalD) +
  tm_borders() +
  tm_fill("TRIPS", style = "quantile", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")

# Display the map
tmap_leaflet(mapA)
tmap_leaflet(mapB)
tmap_leaflet(mapC)
tmap_leaflet(mapD)
```

```{r}
tmap_mode("plot")
mapA <- tm_shape(finalA)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekday 6am-9am",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
mapA
```

```{r}
tmap_mode("view")
mapA
```

```{r}
mapB <- tm_shape(finalB)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Reds",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekday 5pm-8pm",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
mapB
```

```{r}
mapC <- tm_shape(finalC)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Greens",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekend/holidays 11am-2pm",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
```

```{r}
finalA$nb <- st_contiguity(finalA)
finale <- finalA %>%
  filter(!purrr::map_lgl(nb, ~ all(. == 0)))
 
 wm_q <- finale %>%
   mutate(nb = st_contiguity(area_honeycomb_grid),
          wt = st_weights(nb,
                          style = "W"),
          .before = 1) 
```

```{r}
summary(wm_q)
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

```

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)

```

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of GDPPC",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```


#USE EVERYTHING ABOVE

# Join geospatial and aspatial data

weekdayAM_6_9_trips \<- left_join(busstop, weekdayAM_6_9)

# Create spatial points

test_points \<- weekdayAM_6_9_trips %\>% filter(!is.na(TRIPS)) %\>% st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE) %\>% select(1, 4)

# Create honeycomb grid

area_honeycomb_grid \<- st_make_grid(test_points, c(250, 250), what = "polygons", square = FALSE)

# Convert to sf and add grid ID

honeycomb_grid_sf \<- st_sf(area_honeycomb_grid) %\>% mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))

# Perform spatial join

honeycomb_grid_sf_0 \<- st_intersects(honeycomb_grid_sf, test_points)


```{r}
# Filter out rows with 0 trips
honeycomb_grid_sf_filtered <- honeycomb_grid_sf_0 %>%
  filter(TRIPS > 0)
```


# Filter out rows with 0 trips

honeycomb_grid_sf_filtered \<- honeycomb_grid_sf %\>% filter(TRIPS \> 0)

# \# Calculate contiguity matrix

honeycomb_grid_sf_filtered\$nb \<- st_contiguity(honeycomb_grid_sf_filtered) \# \# \# Filter out rows with empty neighbor sets honeycomb_grid_sf_filtered \<- honeycomb_grid_sf_filtered %\>% filter(!purrr::map_lgl(nb, \~ all(. == 0)))

# Calculate weights

#honeycomb_grid_sf_filtered\$nb \<- st_contiguity(honeycomb_grid_sf_filtered) wm_q \<- honeycomb_grid_sf_filtered %\>% mutate(wt = st_weights(nb, style = "W"))

# Perform LISA analysis

lisa \<- wm_q %\>% mutate(local_moran = local_moran( TRIPS, nb, wt, nsim = 99), .before = 1) %\>% unnest(local_moran)


```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of GDPPC",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii_sim") + 
  tm_borders(alpha = 0.5) +
   tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

```

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")

```

```{r}
# Getting the data of different duration
weekdayAM_6_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

```

```{r}
# Import geospatial data
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
# Rename column for joining
colnames(busstop)[colnames(busstop) == "BUS_STOP_N"] <- "ORIGIN_PT_CODE"

```

```{r}
# Join geospatial and aspatial data
weekdayAM_6_9_trips <- left_join(busstop, weekdayAM_6_9)

```

```{r}
# Create spatial points
test_points <- weekdayAM_6_9_trips %>%
  filter(!is.na(TRIPS)) %>%
  st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE) %>%
  select(1, 4)
```

```{r}
# Create honeycomb grid
area_honeycomb_grid <- st_make_grid(test_points, c(250, 250), what = "polygons", square = FALSE)
```

```{r}
# Convert to sf and add grid ID
honeycomb_grid_sf <- st_sf(area_honeycomb_grid) %>%
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))
honeycomb_grid_sf <- st_join(honeycomb_grid_sf, test_points)
```

```{r}
# Filter out rows with 0 trips
honeycomb_grid_sf_filtered <- honeycomb_grid_sf %>%
  filter(TRIPS > 0)
```

```{r}
# Create an interactive leaflet map with blue color palette
map <- tm_shape(honeycomb_grid_sf_filtered) +
  tm_borders() +
  tm_fill("TRIPS", style = "quantile", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")

# Display the map
#tmap_leaflet(map)

```

```{r}
# Calculate contiguity matrix
honeycomb_grid_sf_filtered$nb <- st_contiguity(honeycomb_grid_sf_filtered)
```

```{r}
honeycomb_grid_sf_filtered <- honeycomb_grid_sf_filtered %>%
  filter(!purrr::map_lgl(nb, ~ all(. == 0)))
```

```{r}
# Calculate weights
wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)

```

```{r}
wm_q
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)

```

```{r}
honeycomb_grid_sf_filtered <- honeycomb_grid_sf_filtered %>%
  filter(!is_empty(area_honeycomb_grid))
wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(nb = st_contiguity(honeycomb_grid_sf_filtered),
         wt = st_weights(nb, style = "W"),
         .before = 1)
```

```{r}
nb <- poly2nb(honeycomb_grid_sf_filtered, queen = TRUE)
lw <- nb2listw(nb, style = "W")

# Assign spatial weights to the data frame
honeycomb_grid_sf_filtered$wt <- lw$weights

wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(nb = st_contiguity(honeycomb_grid_sf_filtered),
         wt = st_weights(nb, style = "W"),
         .before = 1)
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, 
    nb, 
    wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
nrow(wm_q)  # Check the number of rows in wm_q
length(wm_q$TRIPS)  # Check the length of TRIPS
length(wm_q$nb)  # Check the length of nb
length(wm_q$wt)  # Check the length of wt

lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, 
    nb, 
    wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")

# Getting the data of different duration
weekdayAM_6_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

# Import geospatial data
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)

# Rename column for joining
colnames(busstop)[colnames(busstop) == "BUS_STOP_N"] <- "ORIGIN_PT_CODE"

# Join geospatial and aspatial data
weekdayAM_6_9_trips <- left_join(busstop, weekdayAM_6_9)

# Create spatial points
test_points <- weekdayAM_6_9_trips %>%
  filter(!is.na(TRIPS)) %>%
  st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE) %>%
  select(1, 4)

# Create honeycomb grid
area_honeycomb_grid <- st_make_grid(test_points, c(250, 250), what = "polygons", square = FALSE)

# Convert to sf and add grid ID
honeycomb_grid_sf <- st_sf(area_honeycomb_grid) %>%
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))

# Perform spatial join
honeycomb_grid_sf <- st_join(honeycomb_grid_sf, test_points)

# Filter out rows with 0 trips
honeycomb_grid_sf_filtered <- honeycomb_grid_sf %>%
  filter(TRIPS > 0)

# Create an interactive leaflet map with blue color palette
map <- tm_shape(honeycomb_grid_sf_filtered) +
  tm_borders() +
  tm_fill("TRIPS", style = "quantile", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")

# Display the map
#tmap_leaflet(map)


contiguity_matrix <- st_contiguity(honeycomb_grid_sf_filtered)

# Filter out features with empty neighbor sets
non_empty_features <- which(lengths(contiguity_matrix) > 0)
honeycomb_grid_sf_filtered <- honeycomb_grid_sf_filtered[non_empty_features, ]

# Create spatial weights matrix
wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(wt = st_weights(contiguity_matrix, style = "W"),
         .before = 1)
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, 
    nb, 
    wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)


```

```{r}
honeycomb_grid_sf_filtered$nb <- st_contiguity(honeycomb_grid_sf)
wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, 
    nb, 
    wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
colnames(honeycomb_grid_sf_filtered)[colnames(honeycomb_grid_sf_filtered) == "area_honeycomb_grid"] <- "geometry"
```

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")

# Getting the data of different duration
weekdayAM_6_9 <- odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

# Import geospatial data
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)

# Rename column for joining
colnames(busstop)[colnames(busstop) == "BUS_STOP_N"] <- "ORIGIN_PT_CODE"

# Join geospatial and aspatial data
weekdayAM_6_9_trips <- left_join(busstop, weekdayAM_6_9)

# Create spatial points
test_points <- weekdayAM_6_9_trips %>%
  filter(!is.na(TRIPS)) %>%
  st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE) %>%
  select(1, 4)

# Create honeycomb grid
area_honeycomb_grid <- st_make_grid(test_points, c(250, 250), what = "polygons", square = FALSE)

# Convert to sf and add grid ID
honeycomb_grid_sf <- st_sf(area_honeycomb_grid) %>%
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))
honeycomb_grid_sf <- st_join(honeycomb_grid_sf, test_points)

# Calculate contiguity matrix
honeycomb_grid_sf$nb <- st_contiguity(honeycomb_grid_sf)

# Filter out rows with 0 trips
honeycomb_grid_sf_filtered <- honeycomb_grid_sf %>%
  filter(TRIPS > 0)

# Create an interactive leaflet map with blue color palette
map <- tm_shape(honeycomb_grid_sf_filtered) +
  tm_borders() +
  tm_fill("TRIPS", style = "quantile", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")

# Display the map
#tmap_leaflet(map)
wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)
honeycomb_grid_sf$nb <- st_contiguity(honeycomb_grid_sf)
wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)

lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, 
    nb, 
    wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}

x<-1
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, 
    nb, 
    wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
# Calculate weights
# wm_q <- honeycomb_grid_sf_filtered %>%
#   mutate(wt = st_weights(nb, style = "W"),
#          .before = 1)

wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(nb = st_contiguity(honeycomb_grid_sf),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 
```

```{r}
w <- honeycomb_grid_sf_filtered %>%
  mutate(nb = st_contiguity(area_honeycomb_grid),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 
```

```{r}
# Calculate weights
# wm_q <- honeycomb_grid_sf_filtered %>%
#   mutate(wt = st_weights(nb, style = "W"),
#          .before = 1)

wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(nb = st_contiguity(honeycomb_grid_sf),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 
```

```{r}
summary(wm_q)
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, 
    nb, 
    wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
wm_q <- honeycomb_grid_sf_filtered %>%
  mutate(wt = st_weights(nb, style = "W"),
         .before = 1)

# Confirm data dimensions
dim(wm_q$TRIPS)
dim(wm_q$wt)

# Print summary to check for missing values
summary(wm_q)

# Continue with Local Moran's I analysis
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TRIPS, nb, wt, nsim = 99),
  .before = 1) %>%
  unnest(local_moran)
```


## Load data

### Import aspiatial data


```{r}
odbus <-read_csv("data/aspatial/origin_destination_bus_202310.csv")
```


Getting the data of the different duration


```{r}
weekdayAM_6_9<-odbus %>% 
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```


### Import geospatial


```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
colnames(busstop)[colnames(busstop) == "BUS_STOP_N"] <- "ORIGIN_PT_CODE"
```

```{r}
weekdayAM_6_9_trips <- left_join(busstop,weekdayAM_6_9)
```

```{r}
test_points = weekdayAM_6_9_trips %>%
  filter(!is.na(TRIPS)) %>%
  st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE) %>%
  select(1,4)
```

```{r}
area_honeycomb_grid = st_make_grid(test_points, c(500, 500), what = "polygons", square = FALSE)
```

```{r}
hex_sf = st_sf(area_honeycomb_grid) %>%
  # add grid ID
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))
```

```{r}
hex_grid <- st_make_grid(test_points, cellsize = c(250, 250), what = "polygons", square = FALSE)

# Convert hexagonal grid to sf object
hex_sf <- st_sf(geometry = hex_grid, grid_id = 1:length(lengths(hex_grid)))

# Spatial join to get the total trips in each hexagon
hex_sf <- st_join(hex_sf, test_points) %>%
  group_by(grid_id) %>%
  summarise(total_trips = sum(TRIPS, na.rm = TRUE))
```

```{r}
honeycomb_grid_sf <- st_join(honeycomb_grid_sf, hex_sf, by = "grid_id")
```

```{r}
honeycomb_grid_sf_filtered <- honeycomb_grid_sf %>%
  filter(total_trips > 0)

# Create an interactive leaflet map
map <- tm_shape(honeycomb_grid_sf_filtered) +
  tm_borders() +
  tm_fill("total_trips", style = "cont", palette = "Blues", title = "Total Trips") +
  tm_layout(title = "Hexagonal Grid with Total Trips")

# Display the map
tmap_leaflet(map)
```

```{r}
honeycomb_grid_sf$busstop = st_intersects(honeycomb_grid_sf, test_points)


```

```{r}
AM_6_9_map <- tm_shape(honeycomb_grid_sf)+
  tm_fill("ridership", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekday 6am-9am",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
AM_6_9_map
```

```{r}
honeycomb_grid_busstop = st_intersects(test_points, honeycomb_grid_sf)  

#   select(TRIPS, grid_id) %>% 
 # st_drop_geometry()
```

```{r}

```

```{r}
o <- left_join(weekdayAM_6_9_trips,honeycomb_grid_busstop)

```

```{r}
honeycomb_grid_sf$ridership = st_intersects(honeycomb_grid_sf, test_points)%>%
  group_by(grid_id) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```


------------------------------------------------------------------------


```{r}
test_points = weekdayAM_6_9_trips %>%
  # lng/lat value are missing in some records
  filter(!is.na(TRIPS)) %>%
  st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE)
```

```{r}
area_honeycomb_grid = st_make_grid(test_points, c(500, 500), what = "polygons", square = FALSE)
```


# To sf and add grid ID


```{r}
honeycomb_grid_sf = st_sf(area_honeycomb_grid) %>%
  # add grid ID
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))
```

```{r}
honeycomb_grid_busstop = st_intersects(test_points, honeycomb_grid_sf) %>% 
  select(TRIPS, grid_id) %>% 
st_drop_geometry()
```


filtered_data \<- subset(honeycomb_grid_sf, ridership %% 1 == 0)


```{r}
mode(honeycomb_grid_sf$ridership[1])
```

```{r}
tmap_mode("view")

map_honeycomb = tm_shape(honeycomb_grid_sf) +
  tm_fill(
    col = "ridership",
    palette = "Reds",
    style = "cont",
    title = "Number of collisions",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of collisions: " = "ridership"
    ),
    popup.format = list(
      ridership = list(format = "f", digits = 0)
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)

map_honeycomb
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
duplicate1 <- AM_6_9 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate2 <- PM_5_8 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate3 <- AM_11_2 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()

duplicate4 <- PM_5_8 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
c(duplicate1,duplicate2,duplicate3,duplicate4)
```

```{r}
AM_6_9 <- unique(AM_6_9)
PM_5_8 <- unique(PM_5_8)
AM_11_2 <- unique(AM_11_2)
PM_4_7 <- unique(PM_4_7)
```


Check if duplicates cleared


```{r}
mpsz_AM_6_9 <- left_join(mpsz,AM_6_9,by = c("SUBZONE_C" = "ORIGIN_SZ"))
mpsz_PM_5_8 <- left_join(mpsz,PM_5_8,by = c("SUBZONE_C" = "ORIGIN_SZ"))
mpsz_AM_11_2 <- left_join(mpsz,AM_11_2,by = c("SUBZONE_C" = "ORIGIN_SZ"))
mpsz_PM_4_7 <- left_join(mpsz,PM_4_7 ,by = c("SUBZONE_C" = "ORIGIN_SZ"))
```

```{r}
tmap_mode("plot")
AM_6_9_map <- tm_shape(mpsz_AM_6_9)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekday 6am-9am",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))

PM_5_8_map <- tm_shape(mpsz_PM_5_8)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Greens",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekday 5pm-8pm",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))

AM_11_2_map <- tm_shape(mpsz_AM_11_2)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Reds",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekend/holidays 11am-2pm",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))

PM_4_7_map <- tm_shape(mpsz_PM_4_7)+
  tm_fill("TRIPS", 
          style = "quantile", 
          palette = "Greens",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekends/holidays 4pm-7pm",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
```

```{r}
#tmap_arrange(AM_6_9_map, PM_5_8_map,AM_11_2_map,PM_4_7_map, asp = 2, ncol = 2)
```


Transform data to hex friendly


```{r}

gtest_points = mpsz_AM_6_9 %>%
  # lng/lat value are missing in some records
  filter(!is.na(geometry)) %>%
  st_as_sf(coords = "geometry", crs = 3414, remove = FALSE)
```


Making grids


```{r}
hex_grid <- st_make_grid(gtest_points, c(750, 750), what = "polygons", square = FALSE)
grid_sf = st_sf(hex_grid) %>%
  # add grid ID
  mutate(grid_id = 1:length(lengths(hex_grid)))

```

```{r}


```

```{r}
contents <- st_intersects(hex_grid, gtest_points)

for (i in 1:length(contents)) {
  x = 0
  for (j in unlist(i)){
    x = x + gtest_points$TRIPS[j]
  }
  grid_sf$ridership[i] = x

}
```

```{r}
grid_sf$ridership = lengths(st_intersects(hex_grid, gtest_points))
grid_count = filter(grid_sf, ridership > 0)
```

```{r}
AM_6_9_map <- tm_shape(grid_count)+
  tm_fill("ridership", 
          style = "quantile", 
          palette = "Blues",
          title = "Passenger trips") +
  tm_layout(main.title = "Passenger trips generated Weekday 6am-9am",
            main.title.position = "center",
            main.title.size = 0.7,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 1) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from URA\n and Passenger trips data from LTA", 
             position = c("left", "bottom"))
AM_6_9_map
```

```{r}
tmap_mode("view")

map_honeycomb = tm_shape(grid_count) +
  tm_fill(
    col = "ridership",
    palette = "Blues",
    style = "cont",
    title = "Number of bus stops",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of bus stops: " = "ridership"
    ),
    popup.format = list(
      ridership = list(format = "f", digits = 0)
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)

map_honeycomb
mode(map_honeycomb)
```

```{r}
mode(map_honeycomb)
```

```{r}
mapview_test_points = mapview(gtest_points, cex = 3, alpha = .5, popup = NULL)

mapview_test_points
```

